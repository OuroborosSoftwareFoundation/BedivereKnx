<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExMsg_KnxDptInvalid" xml:space="preserve">
    <value>Invalid KNX datapoint type: {0}.</value>
  </data>
  <data name="ExMsg_FileFormatInvalid" xml:space="preserve">
    <value>Invalid {0} file format.</value>
  </data>
  <data name="ExMsg_KnxObjectPartNotFound" xml:space="preserve">
    <value>Can't found ‘{0}’ group part in ‘{1}’.</value>
  </data>
  <data name="ExMsg_KnxObjectPartInvalid" xml:space="preserve">
    <value>Invalid KnxObjectPart: '{0}'.</value>
  </data>
  <data name="ExMsg_KeyNotFound" xml:space="preserve">
    <value>Can't found {0} where '{1}'.</value>
  </data>
  <data name="ExMsg_FileNotFound" xml:space="preserve">
    <value>File not found.</value>
  </data>
  <data name="ExMsg_NoNullAllowed" xml:space="preserve">
    <value>{0} can't be null ({1}).</value>
  </data>
  <data name="ExMsg_KnxObjectTypeInvalid" xml:space="preserve">
    <value>Invalid KnxObjectType: {0}.</value>
  </data>
  <data name="ExMsg_KnxSceneNumberInvalid" xml:space="preserve">
    <value>Invalid KNX scene number:{0}.</value>
  </data>
  <data name="ExMsg_KnxSceneAddressNull" xml:space="preserve">
    <value>Empty KnxScene address where 'SceneCode = {0}'.</value>
  </data>
  <data name="ExMsg_KnxInterfaceTypeInvalid" xml:space="preserve">
    <value>Invalid KNX interface type: {0}.</value>
  </data>
  <data name="Hdr_NetStatus" xml:space="preserve">
    <value>Network Status</value>
  </data>
  <data name="Hdr_ConnState" xml:space="preserve">
    <value>Knx Connection State</value>
  </data>
  <data name="Hdr_Reachable" xml:space="preserve">
    <value>Device Reachable</value>
  </data>
  <data name="Hdr_SwFdbValue" xml:space="preserve">
    <value>Switch Control Value</value>
  </data>
  <data name="Hdr_ValFdbValue" xml:space="preserve">
    <value>Value Feedback Value</value>
  </data>
  <data name="Hdr_Account" xml:space="preserve">
    <value>Account</value>
  </data>
  <data name="Hdr_Enable" xml:space="preserve">
    <value>Enable</value>
  </data>
  <data name="ExMsg_TableMiss" xml:space="preserve">
    <value>Data table miss: {0}.</value>
  </data>
  <data name="ExMsg_KnxPortInvalid" xml:space="preserve">
    <value>Invalid KnxInterface port:{0} (code={1}).</value>
  </data>
  <data name="ExMsg_EnumInvalid" xml:space="preserve">
    <value>Invalid enum value '{0}' ({1}).</value>
  </data>
  <data name="Hdr_AreaCode" xml:space="preserve">
    <value>Area Code</value>
  </data>
  <data name="Hdr_DeviceCode" xml:space="preserve">
    <value>Device Code</value>
  </data>
  <data name="Hdr_DeviceModel" xml:space="preserve">
    <value>Device Model</value>
  </data>
  <data name="Hdr_DeviceName" xml:space="preserve">
    <value>Device Name</value>
  </data>
  <data name="Hdr_GroupAddress" xml:space="preserve">
    <value>Group Address</value>
  </data>
  <data name="Hdr_IndividualAddress" xml:space="preserve">
    <value>Individual Address</value>
  </data>
  <data name="Hdr_InterfaceAddress" xml:space="preserve">
    <value>Interface Address</value>
  </data>
  <data name="Hdr_InterfaceCode" xml:space="preserve">
    <value>Interface Code</value>
  </data>
  <data name="Hdr_InterfaceName" xml:space="preserve">
    <value>Interface Name</value>
  </data>
  <data name="Hdr_InterfaceType" xml:space="preserve">
    <value>Interface Type</value>
  </data>
  <data name="Hdr_LinkName" xml:space="preserve">
    <value>Link Name</value>
  </data>
  <data name="Hdr_LinkUrl" xml:space="preserve">
    <value>Link Url</value>
  </data>
  <data name="Hdr_MainAreaName" xml:space="preserve">
    <value>Main Area Name</value>
  </data>
  <data name="Hdr_MainAreaCode" xml:space="preserve">
    <value>Main Area Code</value>
  </data>
  <data name="Hdr_MiddleAreaName" xml:space="preserve">
    <value>Middle Area Name</value>
  </data>
  <data name="Hdr_MiddleAreaCode" xml:space="preserve">
    <value>Middle Area Code</value>
  </data>
  <data name="Hdr_ObjectCode" xml:space="preserve">
    <value>Object Code</value>
  </data>
  <data name="Hdr_ObjectName" xml:space="preserve">
    <value>Object Name</value>
  </data>
  <data name="Hdr_ObjectType" xml:space="preserve">
    <value>Object Type</value>
  </data>
  <data name="Hdr_Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Hdr_Port" xml:space="preserve">
    <value>Port</value>
  </data>
  <data name="Hdr_SceneCode" xml:space="preserve">
    <value>Scene Code</value>
  </data>
  <data name="Hdr_SceneName" xml:space="preserve">
    <value>Scene Name</value>
  </data>
  <data name="Hdr_SceneValues" xml:space="preserve">
    <value>Scene Values</value>
  </data>
  <data name="Hdr_ScheduleCode" xml:space="preserve">
    <value>Schedule Code</value>
  </data>
  <data name="Hdr_ScheduleEvents" xml:space="preserve">
    <value>Schedule Events</value>
  </data>
  <data name="Hdr_ScheduleName" xml:space="preserve">
    <value>Schedule Name</value>
  </data>
  <data name="Hdr_SubAreaName" xml:space="preserve">
    <value>Sub Area Name</value>
  </data>
  <data name="Hdr_SubAreaCode" xml:space="preserve">
    <value>Sub Area Code</value>
  </data>
  <data name="Hdr_SwCtlGrpAddr" xml:space="preserve">
    <value>Switch Control Address</value>
  </data>
  <data name="Hdr_SwFdbGrpAddr" xml:space="preserve">
    <value>Switch Feedback Address</value>
  </data>
  <data name="Hdr_SwDpt" xml:space="preserve">
    <value>Switch DPT</value>
  </data>
  <data name="Hdr_TargetCode" xml:space="preserve">
    <value>Target Code</value>
  </data>
  <data name="Hdr_TargetType" xml:space="preserve">
    <value>Target Type</value>
  </data>
  <data name="Hdr_ValCtlGrpAddr" xml:space="preserve">
    <value>Value Control Address</value>
  </data>
  <data name="Hdr_ValFdbGrpAddr" xml:space="preserve">
    <value>Value Feedback Address</value>
  </data>
  <data name="Hdr_ValDpt" xml:space="preserve">
    <value>Value DPT</value>
  </data>
  <data name="Hdr_Id" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="Hdr_Code" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="Hdr_Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Hdr_Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Hdr_SwFdb" xml:space="preserve">
    <value>Switch Feedback</value>
  </data>
  <data name="Hdr_ValFdb" xml:space="preserve">
    <value>Value Feedback</value>
  </data>
</root>